<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/05/08/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<span id="more"></span>

<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello&quot;</span> | <span class="keyword">while</span> <span class="built_in">read</span> line</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$line</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Testing</tag>
      </tags>
  </entry>
  <entry>
    <title>linux常用命令之奇技淫巧</title>
    <url>/2021/06/26/linux-chang-yong-ming-ling-zhi-qi-ji-yin-qiao/</url>
    <content><![CDATA[<h1 id="1-根据类名查找某个目录下的jar包"><a href="#1-根据类名查找某个目录下的jar包" class="headerlink" title="1.根据类名查找某个目录下的jar包"></a>1.根据类名查找某个目录下的jar包</h1><p>使用场景：程序抛出ClassNotFound异常，需要定位Class所在的jar包</p>
<h2 id="方式一：find"><a href="#方式一：find" class="headerlink" title="方式一：find"></a>方式一：find</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.LIB_DIR替换成集群包安装目录，如果不知道具体目录，则可用&quot;/&quot;替代，但需要切换到root用户或有sudo权限的用户。</span></span><br><span class="line">LIB_DIR=<span class="string">&quot;/&quot;</span></span><br><span class="line"><span class="comment">#2.KEYWORD替换成具体的类</span></span><br><span class="line">KEYWORD=<span class="string">&quot;GuardianClientException&quot;</span></span><br><span class="line"><span class="comment">#根据类名查询某个目录下的jar包，同时跳过/proc、/tmp、/boot、/sys等无关目录</span></span><br><span class="line">find <span class="variable">$LIB_DIR</span> \( -path <span class="string">&quot;/proc&quot;</span> -o -path <span class="string">&quot;/tmp&quot;</span> -o -path <span class="string">&quot;/boot&quot;</span> -o -path <span class="string">&quot;/sys&quot;</span> \) -prune -o -<span class="built_in">type</span> f -name \*.jar | <span class="keyword">while</span> <span class="built_in">read</span> line</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">classInfo=`jar -tf <span class="variable">$line</span> | grep <span class="variable">$KEYWORD</span>`</span><br><span class="line">[[ -n <span class="variable">$classInfo</span> ]] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$line</span> -&gt; <span class="variable">$classInfo</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>优点：只匹配jar包文件且不用扫描所有目录<br>缺点：依次遍历处理jar包，速度比较慢</p>
<h2 id="方式二：grep"><a href="#方式二：grep" class="headerlink" title="方式二：grep"></a>方式二：grep</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#LIB_DIR替换成集群包安装目录，如果不知道具体目录，则可用&quot;/&quot;替代，但需要切换到root用户或有sudo权限的用户。</span></span><br><span class="line">LIB_DIR=<span class="string">&quot;/&quot;</span></span><br><span class="line">grep -r GuardianClientException <span class="variable">$LIB_DIR</span></span><br></pre></td></tr></table></figure>
<p>优点：速度较方式一快<br>缺点：需要匹配所有文件，当目录文件特别多的时候，速度也会很慢</p>
<h1 id="2-删除apache-livy所有session"><a href="#2-删除apache-livy所有session" class="headerlink" title="2.删除apache livy所有session"></a>2.删除apache livy所有session</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#删除所有livy session</span></span><br><span class="line"><span class="comment">#livyServer主机</span></span><br><span class="line">livyHost=192.168.1.137</span><br><span class="line"><span class="comment">#livyServer端口</span></span><br><span class="line">livyPort=8998</span><br><span class="line">curl -X GET <span class="variable">$livyHost</span>:<span class="variable">$livyPort</span>/sessions | python -m json.tool | grep <span class="string">&#x27;&quot;id&quot;:&#x27;</span> | grep -Eo <span class="string">&quot;[0-9]+&quot;</span> | <span class="keyword">while</span> <span class="built_in">read</span> sessionId</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">curl -X DELETE <span class="variable">$livyHost</span>:<span class="variable">$livyPort</span>/sessions/<span class="variable">$sessionId</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;session: <span class="variable">$sessionId</span> 已删除&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h1 id="3-查找某个进程中CPU占用TopN的线程信息"><a href="#3-查找某个进程中CPU占用TopN的线程信息" class="headerlink" title="3.查找某个进程中CPU占用TopN的线程信息"></a>3.查找某个进程中CPU占用TopN的线程信息</h1><p>使用场景：线上环境某个进程CPU占用率非常高，需要找到是哪个业务线程导致的</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.查看某个进程中CPU使用Top10的线程，进程ID替换为具体值</span></span><br><span class="line">ps -mp 进程ID -o THREAD,tid,time | <span class="built_in">sort</span> -rk2 | <span class="built_in">head</span> -11 | awk -F<span class="string">&#x27; &#x27;</span> <span class="string">&#x27;&#123;if($8 ~ /[0-9]+/) &#123;printf &quot;%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%x\t%s\n&quot;,$1,$2,$3,$4,$5,$6,$7,$8,$8,$9&#125; else if($8 == &quot;TID&quot;) &#123;print $1&quot;\t&quot;$2&quot;\t&quot;$3&quot;\t&quot;$4&quot;\t&quot;$5&quot;\t&quot;$6&quot;\t&quot;$7&quot;\t&quot;$8&quot;\tTID-Hex\t&quot;$9&#125; else&#123;print $1&quot;\t&quot;$2&quot;\t&quot;$3&quot;\t&quot;$4&quot;\t&quot;$5&quot;\t&quot;$6&quot;\t&quot;$7&quot;\t&quot;$8&quot;\t&quot;$8&quot;\t&quot;$9&#125;&#125;&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#2.查看进程中具体线程的信息，进程ID和线程ID替换成对应的值</span></span><br><span class="line">jstack 进程ID | grep -A 10 16进制线程ID</span><br></pre></td></tr></table></figure>

<h1 id="4-查看进程启动时间和运行时间"><a href="#4-查看进程启动时间和运行时间" class="headerlink" title="4.查看进程启动时间和运行时间"></a>4.查看进程启动时间和运行时间</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#进程启动时间</span></span><br><span class="line">processId=进程ID</span><br><span class="line">lstart=`ps -eo pid,lstart | grep <span class="string">&quot;<span class="variable">$&#123;processId&#125;</span>.*&quot;</span> | grep -v grep | awk -F<span class="string">&#x27; &#x27;</span> <span class="string">&#x27;&#123;print $2,$3,$4,$5,$6&#125;&#x27;</span>`</span><br><span class="line"><span class="built_in">test</span> -n <span class="string">&quot;<span class="variable">$lstart</span>&quot;</span> &amp;&amp; lstart=`<span class="built_in">date</span> -d <span class="string">&quot;<span class="variable">$lstart</span>&quot;</span> +<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;$进程启动时间: <span class="variable">$lstart</span>&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#进程运行时间</span></span><br><span class="line">etime=`ps -eo pid,etime | grep <span class="string">&quot;<span class="variable">$&#123;processId&#125;</span>.*&quot;</span> | grep -v grep | awk -F<span class="string">&#x27; &#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line"><span class="built_in">test</span> -n <span class="string">&quot;<span class="variable">$etime</span>&quot;</span> &amp;&amp; etime=`<span class="built_in">echo</span> <span class="variable">$etime</span> | sed <span class="string">&#x27;s/-/d /g&#x27;</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;$进程运行时间: <span class="variable">$etime</span>&quot;</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/1651822440863.png"></p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
